global !p
indent = 4

greek_letters = ['alpha',
				 'beta',
				 'gamma',
				 'Gamma',
				 'delta',
				 'Delta',
				 'epsilon',
				 'varepsilon',
				 'zeta',
				 'eta',
				 'theta',
				 'vartheta',
				 'Theta',
				 'iota',
				 'kappa',
				 'Kappa',
				 'lambda',
				 'Lambda',
				 'mu',
				 'nu',
				 'xi',
				 'Xi',
				 'pi',
				 'Pi',
				 'rho',
				 'varrho',
				 'sigma',
				 'Sigma',
				 'tau',
				 'upsilon',
				 'Upsilon',
				 'phi',
				 'varphi',
				 'Phi',
				 'chi',
				 'psi',
				 'Psi',
				 'omega',
				 'Omega',
				 'nabla']

def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

def find_matching_quotations(string, pos, count, char):
    print(string)
    print(pos)
    if string[pos] == char and (pos-1 < 0 or string[pos-1] != '\\'):
        count += 1
    if pos <= 0:
        return count % 2
    else:
        return find_matching_quotations(string, pos-1, count, char)

def expand_tabstops(snip):
    # Create anonymous snippet body
    anon_snippet_body = ""

    # Get start and end line number of expanded snippet
    start = snip.snippet_start[0]
    end = snip.snippet_end[0]

    # Append current line into anonymous snippet
    for i in range(start, end + 1):
        anon_snippet_body += snip.buffer[i]
        anon_snippet_body += "" if i == end else "\n"

    # Delete expanded snippet line till second to last line
    for i in range(start, end):
        del snip.buffer[start]

    # Empty last expanded snippet line while preserving the line
    snip.buffer[start] = ''

    # Expand anonymous snippet
    snip.expand_anon(anon_snippet_body)

def create_array(rows, cols, sep, start, end):
    result = ""
    tabstop = 1
    for _ in range(rows):
        result += f"{start}{sep.join(['$' + str(i) for i in range(tabstop, tabstop + cols)])} {end}"
        tabstop += cols

    return result[:-1]

endglobal

# snippet preamble "gives the default preamble" b
# \documentclass[11pt]{scrartcl}
# \usepackage[sexy]{evan}
# \setlength{\parindent}{${1:0.0cm}}
# \setlength{\parskip}{${2:0.25cm}}
# 
# \title{$3}
# \author{${4:Michael Zhou}}
# \date{${5:\today}}
# 
# \begin{document}
# \maketitle
# 
# $0
# 
# \end{document}
# endsnippet

snippet preamble "gives the default preamble" b
%! TeX program = lualatex
\documentclass[11pt]{scrartcl}
\usepackage{michael}

\title{$1}

\begin{document}
\maketitle

$0

\end{document}
endsnippet

snippet beg "begin{} / end{}" b
\begin{$1}$0
\end{$1}
endsnippet

snippet mm "Math" b
\[
    $0
\]
endsnippet

snippet im "inline math" w
\( $1 \)$0
endsnippet

snippet asy "asymptote expansion" b
\begin{figure}
	\centering
	\begin{asy}
		$0
	\end{asy}
\end{figure}
endsnippet

context "math()"
snippet mbf "math bold face" wA
\mathbf{$1}$0
endsnippet

context "math()"
snippet mrm "math roman" wA
\mathrm{$1}$0
endsnippet

context "math()"
snippet mbb "math blackboard bold" wA
\mathbb{$1}$0
endsnippet

context "math()"
snippet mcal "math caligraphy" wA
\mathcal{$1}$0
endsnippet

context "math()"
snippet xnn "math blackboard bold" wA
x_{n}$0
endsnippet

context "math()"
snippet xii "math blackboard bold" wA
x_{i}$0
endsnippet

context "math()"
snippet xjj "math blackboard bold" wA
x_{j}$0
endsnippet

context "math()"
snippet xn1 "math blackboard bold" wA
x_{n+1}$0
endsnippet

context "math()"
snippet '([a-zA-Z])(\d)' "auto subscript" wrA
`!p snip.rv = f'{match.group(1)}_{match.group(2)}'`$0
endsnippet

context "math()"
priority 1
snippet '\\([A-Za-z]+)(\d)' "auto subscript greek" wrA
`!p
if match.group(1) in greek_letters:
	snip.rv = f'\\{match.group(1)}_{match.group(2)} '
else:
	snip.rv = f'\\{match.group(1)}{match.group(2)}'
`$0
endsnippet

context "math()"
snippet _ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ^ "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet sqre "square" iA
^2$0
endsnippet

context "math()"
snippet cube "cube" iA
^3$0
endsnippet

context "math()"
snippet '([^\\])sqrt' "sqrt" rA
`!p
snip.rv = match.group(1)`\sqrt{$1}$0
endsnippet

context "math()"
snippet rt "root" w
\sqrt[$1]{$2}$0
endsnippet

context "math()"
snippet '([A-Za-z0-9]|\\[A-Za-z]+)hat' "hat" rA
\hat{`!p
snip.rv = match.group(1)`}$0
endsnippet

context "math()"
snippet '([^\\])([A-Za-z0-9])dot' "dot" rA
`!p
snip.rv = f"{match.group(1)}\dot{{{match.group(2)}}}"`$0
endsnippet

context "math()"
priority 1
snippet '([A-Za-z0-9]|\\[A-Za-z]+)ddot' "ddot" rA
\ddot{`!p
snip.rv = match.group(1)`}$0
endsnippet

context "math()"
snippet '([A-Za-z0-9]|\\[A-Za-z]+)bar' "bar" rA
\bar{`!p
snip.rv = match.group(1)`}$0
endsnippet

context "math()"
snippet '([A-Za-z0-9]|\\[A-Za-z]+)vec' "vec" rA
\vec{`!p
snip.rv = match.group(1)`}$0
endsnippet

context "math()"
snippet '([A-Za-z0-9]|\\[A-Za-z]+)und' "und" rA
\underline{`!p
snip.rv = match.group(1)`}$0
endsnippet

context "math()"
snippet '([A-Za-z0-9]|\\[A-Za-z]+)tild' "tild" rA
\tilde{`!p
snip.rv = match.group(1)`}$0
endsnippet

context "math()"
snippet te "text" w
\text{$1}$0
endsnippet

context "math()"
snippet tet "monospace text" w
\texttt{$1} $0
endsnippet

context "math()"
snippet 'lr(p|b|r|<|c|f|\||\\\|)' "left right paren" r
`!p
match match.group(1):
	case 'p':
		left = '('
		right = ')'
	case 'b':
		left = '['
		right = ']'
	case 'r':
		left = '\\{'
		right = '\\}'
	case '<':
		left = '\\langle'
		right = '\\rangle'
	case 'c':
		left = '\\lceil'
		right = '\\rceil'
	case 'f':
		left = '\\lfloor'
		right = '\\rfloor'
	case _:
		left = match.group(1)
		right = match.group(1)
snip.rv = f'\\left{left}'
` $1 `!p
snip.rv = f'\\right{right}'
` $0
endsnippet

context "math()"
snippet RR "reals" w
\mathbb R $0
endsnippet

context "math()"
snippet ZZ "integers" w
\mathbb Z$0
endsnippet

context "math()"
snippet QQ "rationals" w
\mathbb Q$0
endsnippet

context "math()"
snippet CC "complex" w
\mathbb C$0
endsnippet

context "math()"
snippet NN "naturals" w
\mathbb N$0
endsnippet

context "math()"
snippet LL "loss" w
\mathcal L$0
endsnippet

context "math()"
snippet II "indicator" w
\mathbb 1$0
endsnippet

context "math()"
snippet dd "derivative" w
\frac{\mathrm d $1}{\mathrm d $2} $0
endsnippet

context "math()"
snippet 'd([A-Za-z])d([A-Za-z])' "derivative 2" wr
\frac{\mathrm d `!p snip.rv = match.group(1)`}{\mathrm d `!p snip.rv = match.group(2)`} $0
endsnippet

context "math()"
snippet 'dd([A-Za-z])' "derivative 3" wr
\frac{\mathrm d $1}{\mathrm d `!p snip.rv = match.group(1)`} $0
endsnippet

context "math()"
snippet 2dd "second derivative" w
\frac{\mathrm d^2 $1}{\mathrm d $2^2} $0
endsnippet

context "math()"
snippet '2dd([A-Za-z])' "second derivative" wr
\frac{\mathrm d^2 $1}{\mathrm d `!p snip.rv = match.group(1)`^2} $0
endsnippet

context "math()"
snippet '2d([A-Za-z])d([A-Za-z])' "second derivative" wr
\frac{\mathrm d^2 `!p snip.rv = match.group(1)`}{\mathrm d `!p snip.rv = match.group(2)`^2} $0
endsnippet

context "math()"
snippet part "partial" w
\frac{\partial $1}{\partial $2} $0
endsnippet

context "math()"
post_jump "expand_tabstops(snip)"
priority 0
snippet "(\d+),(\d+)" "general 2d table format" r
`!p
rows = int(match.group(1))
cols = int(match.group(2))
if (rows <= 0 or cols <= 0 or rows > 20 or cols > 20):
    snip.rv=''
else:
    snip.rv = create_array(rows, cols, ' & ', '    ', '\\\\\n')
`
endsnippet

context "math()"
post_jump "expand_tabstops(snip)"
priority 1
snippet "bmat(\d+),(\d+)" "make bmatrix" r
\begin{bmatrix}
`!p
rows = int(match.group(1))
cols = int(match.group(2))
if (rows <= 0 or cols <= 0 or rows > 20 or cols > 20):
    snip.rv=''
else:
    snip.rv = create_array(rows, cols, ' & ', '    ', '\\\\\n')
`
\end{bmatrix}
$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

